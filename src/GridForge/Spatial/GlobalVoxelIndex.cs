using GridForge.Grids;
using SwiftCollections;
using System;

namespace GridForge.Spatial
{
    /// <summary>
    /// Represents the global coordinates of a voxel, linking it to a specific grid.
    /// Used for uniquely identifying voxels across multiple grids.
    /// </summary>
    public struct GlobalVoxelIndex : IEquatable<GlobalVoxelIndex>
    {
        #region Properties

        /// <summary>
        /// The index of the grid in <see cref="GlobalGridManager.ActiveGrids"/>.
        /// </summary>
        public ushort GridIndex;

        /// <summary>
        /// The local coordinate of a voxel within the grid at <see cref="GridIndex"/>.
        /// </summary>
        public VoxelIndex VoxelIndex;

        /// <summary>
        /// The unique identifier generated by the grid during initialization.
        /// Used to ensure the correct instance is at the assigned <see cref="GridIndex"/>.
        /// </summary>
        public int GridSpawnToken;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of <see cref="GlobalVoxelIndex"/>, linking a voxel to a grid.
        /// </summary>
        public GlobalVoxelIndex(ushort gridIndex, VoxelIndex coord, int gridSpawnToken)
        {
            GridIndex = gridIndex;
            VoxelIndex = coord;
            GridSpawnToken = gridSpawnToken;
        }

        #endregion

        #region Overrides

        /// <summary>
        /// Returns a string representation of the global coordinates.
        /// </summary>
        public override readonly string ToString()
        {
            return $"Index: {GridIndex}; Coordinate: {VoxelIndex}";
        }

        /// <summary>
        /// Computes a hash code for uniquely identifying this set of global coordinates.
        /// </summary>
        public override readonly int GetHashCode() => 
            HashTools.CombineHashCodes(GridSpawnToken, GridIndex, VoxelIndex);

        /// <inheritdoc/>
        public readonly bool Equals(GlobalVoxelIndex other)
        {
            return GridIndex == other.GridIndex
                && VoxelIndex.Equals(other.VoxelIndex);
        }

        /// <inheritdoc/>
        public override readonly bool Equals(object obj)
        {
            return obj is GlobalVoxelIndex other && Equals(other);
        }

        #endregion
    }
}
